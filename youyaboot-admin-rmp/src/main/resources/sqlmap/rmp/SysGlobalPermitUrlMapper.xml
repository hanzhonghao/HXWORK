<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
* 代码为自动生成 Created by www.magicalcoder.com
* 如果你改变了此类 read 请将此行删除
*  欢迎加入官方QQ群:323237052
-->
<mapper namespace="com.magicalcoder.youyaboot.admin.rmp.mapper.SysGlobalPermitUrlMapper">
    <!-- SysGlobalPermitUrl -->
    <resultMap id="resultMap" type="SysGlobalPermitUrl">
        <id column="ID" property="id"/>
        <result column="PERMIT_NAME" property="permitName" />
        <result column="BACKEND_URL_REG" property="backendUrlReg" />
        <result column="MODULE_ID" property="moduleId" />
    </resultMap>
    <!-- 查询单个实体 -->
    <select id="getModel" parameterType="hashmap" resultMap="resultMap">
        SELECT  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        FROM  <include refid="tableSql"/>  WHERE 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
    </select>
    <!--根据主键 查询单个实体 -->
    <select id="getModelByPk" parameterType="hashmap" resultMap="resultMap">
        SELECT  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        FROM  <include refid="tableSql"/>  <include refid="magicalcoderPkWhereSql"/>
    </select>
    <!-- 查询一组实体 -->
    <select id="getModelList" parameterType="hashmap" resultMap="resultMap">
        <include refid="pageStart"/>
        SELECT  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        <include refid="pageParam"/>
        FROM  <include refid="tableSql"/>  WHERE 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
        <include refid="pageEnd"/>
    </select>
    <!-- 查询一组实体 in 语句-->
    <select id="getModelInList" parameterType="hashmap" resultMap="resultMap">
        <include refid="pageStart"/>
        SELECT  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        <include refid="pageParam"/>
        FROM  <include refid="tableSql"/>  WHERE  ID IN
        <foreach item="id" index="index" collection="idList" open="(" separator="," close=")">#{id}</foreach>
        <include refid="orderGroupLimit"/>
        <include refid="pageEnd"/>
    </select>
    <!-- 查询一组实体的数量 -->
    <select id="getModelListCount" parameterType="hashmap" resultType="int">
        SELECT count(1)  FROM  <include refid="tableSql"/>  WHERE 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
    </select>
    <!-- 插入单个实体 遇到入参null转换成数据库NULL-->
    <insert id="insertModel" parameterType="SysGlobalPermitUrl"  useGeneratedKeys="true" keyProperty="id" >
        <selectKey resultType="long" order="BEFORE" keyProperty="id">SELECT <choose><when test="id==null"> <include refid="sequenceNextValSql"/> </when><otherwise> #{id} </otherwise></choose>FROM DUAL</selectKey>
        INSERT into <include refid="tableSql"/> (<include refid="douFieldSql"/>) values(<include refid="douValueSql"/>)
    </insert>
    <!-- 替换单个实体 如果没有则插入 遇到入参null转换成数据库NULL-->
    <insert id="replaceModel" parameterType="SysGlobalPermitUrl"  useGeneratedKeys="true" keyProperty="id" >
        <!-- 很抱歉 oracle 没有像mysql replace into 这样 的语句-->
    </insert>
    <!-- 插入单个实体 遇到入参null转换成数据库默认值-->
    <insert id="insertModelWithoutNull" parameterType="SysGlobalPermitUrl"  useGeneratedKeys="true" keyProperty="id" >
        <selectKey resultType="long" order="BEFORE" keyProperty="id">SELECT <choose><when test="id==null"> <include refid="sequenceNextValSql"/> </when><otherwise> #{id} </otherwise></choose>FROM DUAL</selectKey>
        INSERT into <include refid="tableSql"/> (<include refid="douFieldWithoutNullSql"/>) values(<include refid="douValueWithoutNullSql"/>)
    </insert>
    <!-- 替换单个实体 如果没有则插入 遇到入参null转换成数据库默认值-->
    <insert id="replaceModelWithoutNull" parameterType="SysGlobalPermitUrl"  useGeneratedKeys="true" keyProperty="id" >
        <!-- 很抱歉 oracle 没有像mysql replace into 这样 的语句-->
    </insert>
    <!-- 批量插入一组实体 -->
    <insert id="batchInsertModel" parameterType="java.util.List"   useGeneratedKeys="false" keyProperty="id" >
        INSERT all
        <foreach collection="list" item="item" index="index" open="" close="" separator="">
            into <include refid="tableSql"/> (<include refid="batchDouFieldSql"/>) values (<include refid="batchDouValueSql"/>)
        </foreach>
        SELECT 1 FROM DUAL
    </insert>
    <!-- 批量替换一组实体 -->
    <insert id="batchReplaceModel" parameterType="java.util.List"  useGeneratedKeys="false" keyProperty="id" >
        <!-- 很抱歉 oracle 没有像mysql replace into 这样 的语句-->
    </insert>
    <insert id="batchInsertModelWithoutNull" parameterType="java.util.List"   useGeneratedKeys="false" keyProperty="id" >
        INSERT all
        <foreach collection="list" item="item" index="index" open="" close="" separator="">
            into <include refid="tableSql"/> (<include refid="batchDouFieldWithoutNullSql"/>) values (<include refid="batchDouValueWithoutNullSql"/>)
        </foreach>
        SELECT 1 FROM DUAL
    </insert>
    <insert id="batchReplaceModelWithoutNull" parameterType="java.util.List"  useGeneratedKeys="false" keyProperty="id" >
        <!-- 很抱歉 oracle 没有像mysql replace into 这样 的语句-->
    </insert>

        <!-- 清空表 操作危险 慎用，暂时注销掉-->
    <delete id="truncateModel">
        -- truncate table <include refid="tableSql"/>
    </delete>

    <!-- 根据主键删除一个实体 magicalCoderPrimaryKeyName 框架封装-->
    <delete id="deleteModelByPk" parameterType="hashmap">
        DELETE FROM <include refid="tableSql"/> <include refid="magicalcoderPkWhereSql"/>
    </delete>

    <delete id="deleteModelList" parameterType="hashmap">
        DELETE FROM <include refid="tableSql"/> WHERE 1=1 <include refid="whereSqlModel"/>
    </delete>

    <!-- 批量删除实体 in 根据主键-->
    <delete id="deleteModelByIds" parameterType="java.util.Set">
        DELETE FROM <include refid="tableSql"/> WHERE ID IN <foreach item="id" index="index" collection="collection" open="(" separator="," close=")">#{id}</foreach>
    </delete>
    <!-- 更新一个实体 -->
    <update id="updateModel" parameterType="SysGlobalPermitUrl">
        UPDATE <include refid="tableSql"/> <include refid="updateSetSql"/> <include refid="updatePkWhereSql"/>
    </update>
    <!-- 更新一个实体 仅仅当被更新的字段不为空的时候才更新，否则忽略更新-->
    <update id="updateModelWithoutNull" parameterType="SysGlobalPermitUrl">
        UPDATE <include refid="tableSql"/> <include refid="updateSetWithoutNullSql"/> <include refid="updatePkWhereSql"/>
    </update>
     <!-- 批量更新实体 传入一组实体，分别根据主键作为查询条件-->
    <update id="batchUpdateModel" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
            UPDATE <include refid="tableSql"/> <include refid="batchUpdateSetSql"/> <include refid="batchUpdatePkWhereSql"/>
        </foreach>
    </update>
    <update id="batchUpdateModelWithoutNull" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
            UPDATE <include refid="tableSql"/> <include refid="batchUpdateWithoutNullSetSql"/> <include refid="batchUpdatePkWhereSql"/>
        </foreach>
    </update>
    <!-- sql 片段 -->
   <sql id="selectSqlIgnoreModel">
        <trim suffixOverrides=",">
            <if test="idIgnore_ == null or !idIgnore_">ID,</if>
            <if test="permitNameIgnore_ == null or !permitNameIgnore_">PERMIT_NAME,</if>
            <if test="backendUrlRegIgnore_ == null or !backendUrlRegIgnore_">BACKEND_URL_REG,</if>
            <if test="moduleIdIgnore_ == null or !moduleIdIgnore_">MODULE_ID</if>
        </trim>
    </sql>
    <sql id="selectSqlNotIgnoreModel">
        <trim suffixOverrides=",">
         <if test="idNotIgnore_ != null and idNotIgnore_">ID,</if>
         <if test="permitNameNotIgnore_ != null and permitNameNotIgnore_">PERMIT_NAME,</if>
         <if test="backendUrlRegNotIgnore_ != null and backendUrlRegNotIgnore_">BACKEND_URL_REG,</if>
         <if test="moduleIdNotIgnore_ != null and moduleIdNotIgnore_">MODULE_ID</if>
        </trim>
    </sql>
    <sql id="douFieldSql">
        <trim suffixOverrides=",">
            <if test="id!=null">"ID",</if> "PERMIT_NAME","BACKEND_URL_REG","MODULE_ID",
        </trim>
    </sql>
    <sql id="douValueSql">
        <trim suffixOverrides=",">
                <choose><when test="id!=null">#{id},</when></choose>
                <choose><when test="permitName!=null">#{permitName},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="backendUrlReg!=null">#{backendUrlReg},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="moduleId!=null">#{moduleId},</when><otherwise>NULL,</otherwise></choose>
        </trim>
    </sql>

    <sql id="douFieldWithoutNullSql">
        <trim suffixOverrides=",">
                <if test="id!=null">"ID",</if>
                <if test="permitName!=null">"PERMIT_NAME",</if>
                <if test="backendUrlReg!=null">"BACKEND_URL_REG",</if>
                <if test="moduleId!=null">"MODULE_ID",</if>

        </trim>
    </sql>
    <sql id="douValueWithoutNullSql">
        <trim suffixOverrides=",">
                <choose><when test="id!=null">#{id},</when></choose>
                <choose><when test="permitName!=null">#{permitName},</when></choose>
                <choose><when test="backendUrlReg!=null">#{backendUrlReg},</when></choose>
                <choose><when test="moduleId!=null">#{moduleId},</when></choose>
        </trim>
    </sql>
    <sql id="batchDouFieldSql">
        <trim suffixOverrides=",">
                "ID",
                "PERMIT_NAME",
                "BACKEND_URL_REG",
                "MODULE_ID",

        </trim>
    </sql>
    <sql id="batchDouValueSql">
        <trim suffixOverrides=",">
                <choose><when test="item.id!=null">#{item.id}</when><otherwise><include refid="sequenceNextValSql"/></otherwise></choose>,
                <choose><when test="item.permitName!=null">#{item.permitName}</when><otherwise> NULL </otherwise></choose>,
                <choose><when test="item.backendUrlReg!=null">#{item.backendUrlReg}</when><otherwise> NULL </otherwise></choose>,
                <choose><when test="item.moduleId!=null">#{item.moduleId}</when><otherwise> NULL </otherwise></choose>,
        </trim>
    </sql>
    <sql id="batchDouFieldWithoutNullSql">
        <trim suffixOverrides=",">
                <choose><when test="item.id!=null">"ID",</when><otherwise>"ID",</otherwise></choose>
                <choose><when test="item.permitName!=null">"PERMIT_NAME",</when><otherwise></otherwise></choose>
                <choose><when test="item.backendUrlReg!=null">"BACKEND_URL_REG",</when><otherwise></otherwise></choose>
                <choose><when test="item.moduleId!=null">"MODULE_ID",</when><otherwise></otherwise></choose>

        </trim>
    </sql>
    <sql id="batchDouValueWithoutNullSql">
        <trim suffixOverrides=",">
                <choose><when test="item.id!=null">#{item.id},</when><otherwise><include refid="sequenceNextValSql"/>,</otherwise></choose>
                <choose><when test="item.permitName!=null">#{item.permitName},</when><otherwise></otherwise></choose>
                <choose><when test="item.backendUrlReg!=null">#{item.backendUrlReg},</when><otherwise></otherwise></choose>
                <choose><when test="item.moduleId!=null">#{item.moduleId},</when><otherwise></otherwise></choose>
        </trim>
    </sql>
    <sql id="updateSetSql">
        <set>
                    <choose> <when test="permitName!=null">PERMIT_NAME=#{permitName}</when> <otherwise> PERMIT_NAME=NULL</otherwise> </choose>,
                    <choose> <when test="backendUrlReg!=null">BACKEND_URL_REG=#{backendUrlReg}</when> <otherwise> BACKEND_URL_REG=NULL</otherwise> </choose>,
                    <choose> <when test="moduleId!=null">MODULE_ID=#{moduleId}</when> <otherwise> MODULE_ID=NULL</otherwise> </choose>,
        </set>
    </sql>
    <sql id="updateSetWithoutNullSql">
        <set>
                    <choose><when test="permitName!=null">PERMIT_NAME=#{permitName},</when></choose>
                    <choose><when test="backendUrlReg!=null">BACKEND_URL_REG=#{backendUrlReg},</when></choose>
                    <choose><when test="moduleId!=null">MODULE_ID=#{moduleId},</when></choose>
        </set>
    </sql>
    <sql id="magicalcoderPkWhereSql">
        WHERE 1=1
            AND ID = #{magicalCoderPrimaryKeyName}
    </sql>
    <sql id="updatePkWhereSql">
        WHERE 1=1
            AND ID = #{id}
    </sql>
    <sql id="batchUpdateSetSql">
        <set>
                    <choose> <when test="item.permitName!=null">PERMIT_NAME=#{item.permitName}</when> <otherwise> PERMIT_NAME=NULL</otherwise> </choose>,
                    <choose> <when test="item.backendUrlReg!=null">BACKEND_URL_REG=#{item.backendUrlReg}</when> <otherwise> BACKEND_URL_REG=NULL</otherwise> </choose>,
                    <choose> <when test="item.moduleId!=null">MODULE_ID=#{item.moduleId}</when> <otherwise> MODULE_ID=NULL</otherwise> </choose>,
        </set>
    </sql>
    <sql id="batchUpdateWithoutNullSetSql">
        <set>
                    <choose> <when test="item.permitName!=null">PERMIT_NAME=#{item.permitName},</when></choose>
                    <choose> <when test="item.backendUrlReg!=null">BACKEND_URL_REG=#{item.backendUrlReg},</when></choose>
                    <choose> <when test="item.moduleId!=null">MODULE_ID=#{item.moduleId},</when></choose>
        </set>
    </sql>
    <sql id="batchUpdatePkWhereSql">
        WHERE 1=1
            AND ID = #{item.id}
    </sql>
    <!-- 这里可以加上表名@youyaboot数据库link名称 方便的切换数据库 由于oracle不同于其他数据库，需要自己建立CREATE DATABASE LINK youyabootlink,所以此处可以根据实际情况自己修改模板-->
    <sql id="tableSql">
        HXEY.SYS_GLOBAL_PERMIT_URL
    </sql>
    <!--序列名默认使用SET_表名 如果您不是这样的取名风格，请手动修改下面的序列名 GET_SEQ_V_A_L_是应该通用函数 参考README.md-->
    <sql id="sequenceNextValSql">
        GET_SEQ_V_A_L_('SEQ_SYS_GLOBAL_PERMIT_URL')
    </sql>
   <sql id="whereSqlModel">
        <if test="id!=null "> AND ID = #{id}</if>
        <if test="permitName!=null "> AND PERMIT_NAME = #{permitName}</if>
        <if test="backendUrlReg!=null "> AND BACKEND_URL_REG = #{backendUrlReg}</if>
        <if test="moduleId!=null "> AND MODULE_ID = #{moduleId}</if>
                <if test="permitNameFirst!=null "> AND PERMIT_NAME <![CDATA[like]]>
                    '%' || #{permitNameFirst} || '%'
                </if>
                <if test="moduleIdFirst!=null "> AND MODULE_ID <![CDATA[=]]>
                            #{moduleIdFirst}
                </if>
        <!--<if test="whereSql!=null"> ${whereSql}</if>-->
    </sql>

    <sql id="safeGroupBy">
        <if test="safeGroupBy!=null and safeGroupBy!=''">
            group by
            <choose>
                <when test="safeGroupBy != null and safeGroupBy == 'ID'">  ID </when>
                <when test="safeGroupBy != null and safeGroupBy == 'PERMIT_NAME'">  PERMIT_NAME </when>
                <when test="safeGroupBy != null and safeGroupBy == 'BACKEND_URL_REG'">  BACKEND_URL_REG </when>
                <when test="safeGroupBy != null and safeGroupBy == 'MODULE_ID'">  MODULE_ID </when>
            </choose>
        </if>
    </sql>
    <sql id="safeOrderBy">
        <if test="safeOrderBy!=null and safeOrderBy!=''">
            <choose>
                <when test="safeOrderBy != null and (safeOrderBy == 'ID desc'  or safeOrderBy == 'id desc')"> ORDER BY ID DESC </when>
                <when test="safeOrderBy != null and (safeOrderBy == 'ID asc'  or safeOrderBy == 'id asc')"> ORDER BY ID ASC </when>
                <when test="safeOrderBy != null and (safeOrderBy == 'PERMIT_NAME desc'  or safeOrderBy == 'permit_name desc')"> ORDER BY PERMIT_NAME DESC </when>
                <when test="safeOrderBy != null and (safeOrderBy == 'PERMIT_NAME asc'  or safeOrderBy == 'permit_name asc')"> ORDER BY PERMIT_NAME ASC </when>
                <when test="safeOrderBy != null and (safeOrderBy == 'BACKEND_URL_REG desc'  or safeOrderBy == 'backend_url_reg desc')"> ORDER BY BACKEND_URL_REG DESC </when>
                <when test="safeOrderBy != null and (safeOrderBy == 'BACKEND_URL_REG asc'  or safeOrderBy == 'backend_url_reg asc')"> ORDER BY BACKEND_URL_REG ASC </when>
                <when test="safeOrderBy != null and (safeOrderBy == 'MODULE_ID desc'  or safeOrderBy == 'module_id desc')"> ORDER BY MODULE_ID DESC </when>
                <when test="safeOrderBy != null and (safeOrderBy == 'MODULE_ID asc'  or safeOrderBy == 'module_id asc')"> ORDER BY MODULE_ID ASC </when>
            </choose>
        </if>
    </sql>

    <sql id="orderGroupLimit">
        <if test="limit == null">
            <include refid="safeGroupBy"/>
            <if test="notSafeGroupBy != null and notSafeGroupBy != ''"> GROUP BY ${notSafeGroupBy}</if>
            <include refid="safeOrderBy"/>
            <if test="notSafeOrderBy != null and notSafeOrderBy != ''"> ORDER BY ${notSafeOrderBy}</if>
        </if>
    </sql>
    <!--说到这 sqlserver的分页实在是复杂 个人还是中意 mysql的 limit 不过为了兼容sqlserver各个版本 还是采取以下方式，不用offset了-->
    <sql id="pageParam">
        <if test="limit != null">
            , ROW_NUMBER() OVER(<choose><when test="(safeOrderBy==null or safeOrderBy=='') and (notSafeOrderBy==null or notSafeOrderBy=='')"> ORDER BY ID </when><otherwise><include refid="safeOrderBy"/><if test="notSafeOrderBy != null and notSafeOrderBy != ''"> ORDER BY ${notSafeOrderBy}</if></otherwise></choose>)  AS MC_ROW_NUM_
        </if>
    </sql>
    <sql id="pageStart">
        <if test="limit != null">
            SELECT * FROM  (
        </if>
    </sql>
    <sql id="pageEnd">
        <if test="limit != null">
            ) MC_TMP_  WHERE <choose><when test="start != null">MC_ROW_NUM_ > #{start} AND MC_ROW_NUM_ <![CDATA[<=]]> #{start}+#{limit}</when><otherwise> MC_ROW_NUM_ <![CDATA[<=]]> #{limit}</otherwise></choose>
        </if>
    </sql>
</mapper>
